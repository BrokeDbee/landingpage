generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  username            String          @unique
  name                String          @default("")
  email               String          @unique
  image               String? // URL to user profile image
  password            String // Hashed password
  role                Role            @relation(fields: [roleId], references: [id])
  roleId              Int
  position            String? // Executive position/title
  positionDescription String?         @db.Text // Short summary of role
  biography           String?         @db.Text // User profile
  socialLinks         Json? // Social media links stored as JSON
  category            String? // Classification (main_executive, other_executive, all_present)
  index               Int             @default(0) // For custom ordering
  published           Boolean         @default(true) // To control visibility
  permits             Permit[] // Permits issued by this user
  auditLogs           AuditLog[]
  recoveryTokens      RecoveryToken[]
  newsArticles        NewsArticle[] // News articles written by this user
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  Event               Event[]
  Newsletter          Newsletter[]
  Document            Document[]
  StudentIdea         StudentIdea[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Student {
  id          Int           @id @default(autoincrement())
  studentId   String        @unique
  name        String
  email       String
  course      String
  level       String
  number      String
  permits     Permit[] // Permits issued to this student
  payments    Payment[] // Payments made by this student
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime? // Soft delete
  StudentIdea StudentIdea[]
}

model Permit {
  id           Int      @id @default(autoincrement())
  permitCode   String   @unique // Hashed permit code
  originalCode String   @unique // Original permit code
  status       String   @default("active") // active, revoked, expired
  startDate    DateTime @default(now())
  expiryDate   DateTime
  amountPaid   Float
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  issuedBy     User?    @relation(fields: [issuedById], references: [id])
  issuedById   Int?
  payment      Payment? // Payment record for this permit
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  details   String
  createdAt DateTime @default(now())
}

model RecoveryToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Payment {
  id               Int           @id @default(autoincrement())
  student          Student       @relation(fields: [studentId], references: [id])
  studentId        Int
  amount           Float
  currency         String        @default("GHS")
  paymentReference String        @unique
  paystackRef      String?       @unique
  status           PaymentStatus @default(PENDING)
  permit           Permit?       @relation(fields: [permitId], references: [id])
  permitId         Int?          @unique
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model NewsArticle {
  id            Int       @id @default(autoincrement())
  title         String
  slug          String    @unique
  content       String    @db.Text
  excerpt       String    @db.Text
  image         String // Cloudinary URL
  category      String // News category (e.g., "Announcements", "Updates", "Education", "Academic")
  categoryColor String // Tailwind classes
  featured      Boolean   @default(false)
  published     Boolean   @default(false)
  publishedAt   DateTime?
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  readTime      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id               Int       @id @default(autoincrement())
  title            String
  slug             String    @unique
  description      String    @db.Text
  excerpt          String    @db.Text
  image            String // Cloudinary URL
  date             DateTime
  time             String // Store time as string (e.g., "14:00")
  location         String
  category         String // Event category (e.g., "Academic", "Social", "Sports", "Cultural")
  categoryColor    String // Tailwind classes
  featured         Boolean   @default(false)
  published        Boolean   @default(false)
  publishedAt      DateTime?
  maxAttendees     Int       @default(0)
  currentAttendees Int       @default(0)
  organizer        User      @relation(fields: [organizerId], references: [id])
  organizerId      Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Config {
  id             Int             @id @default(autoincrement())
  contactInfo    ContactInfo?
  semesterConfig SemesterConfig?
  permitConfig   PermitConfig?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ContactInfo {
  id          Int      @id @default(autoincrement())
  email       String?
  phone       String?
  address     String?  @db.Text
  website     String?
  config      Config   @relation(fields: [configId], references: [id])
  socialLinks Json? // Social media links
  configId    Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SemesterConfig {
  id              Int      @id @default(autoincrement())
  currentSemester String // e.g., "2023/2024"
  academicYear    String // e.g., "2023/2024"
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  config          Config   @relation(fields: [configId], references: [id])
  configId        Int      @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PermitConfig {
  id             Int      @id @default(autoincrement())
  expirationDate DateTime @default(now())
  defaultAmount  Float    @default(0.0)
  currency       String   @default("GHS")
  config         Config   @relation(fields: [configId], references: [id])
  configId       Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model NewsletterSubscriber {
  id        Int                @id @default(autoincrement())
  email     String             @unique
  name      String?
  studentId Int
  status    SubscriptionStatus @default(PENDING)
  token     String             @unique // For email verification
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  UNSUBSCRIBED
}

model Newsletter {
  id        Int              @id @default(autoincrement())
  title     String
  content   String           @db.Text
  status    NewsletterStatus @default(DRAFT)
  sentAt    DateTime?
  sentBy    User             @relation(fields: [sentById], references: [id])
  sentById  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENT
  FAILED
}

model Document {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?  @db.Text
  category     String // e.g., "Academic", "Student Life", "Administrative"
  fileUrl      String // Cloudinary URL
  fileType     String // e.g., "pdf", "doc", "docx"
  fileSize     Int // Size in bytes
  downloads    Int      @default(0)
  isPublic     Boolean  @default(true)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StudentIdea {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @db.Text
  category     String // e.g., "Academic", "Student Life", "Administrative"
  status       IdeaStatus @default(PENDING)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  reviewedBy   User?      @relation(fields: [reviewedById], references: [id])
  reviewedById Int?
  reviewNotes  String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum IdeaStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
}
